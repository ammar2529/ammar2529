/*
 * Agility Custom Ext-Core
 */
/*
 * Ext Core Library 3.0
 * http://extjs.com/
 * Copyright(c) 2006-2009, Ext JS, LLC.
 * 
 * MIT Licensed - http://extjs.com/license/mit.txt
 */

    window.undefined = window.undefined; Ext = { version: "3.1.0" }; Ext.apply = function (d, e, b) { if (b) { Ext.apply(d, b) } if (d && e && typeof e == "object") { for (var a in e) { d[a] = e[a] } } return d }; (function () { var g = 0, s = Object.prototype.toString, t = navigator.userAgent.toLowerCase(), y = function (e) { return e.test(t) }, i = document, l = i.compatMode == "CSS1Compat", A = y(/opera/), h = y(/chrome/), u = y(/webkit/), x = !h && y(/safari/), f = x && y(/applewebkit\/4/), b = x && y(/version\/3/), B = x && y(/version\/4/), r = !A && y(/msie/), p = r && y(/msie 7/), o = r && y(/msie 8/), q = r && !p && !o, n = !u && y(/gecko/), d = n && y(/rv:1\.8/), a = n && y(/rv:1\.9/), v = r && !l, z = y(/windows|win32/), k = y(/macintosh|mac os x/), j = y(/adobeair/), m = y(/linux/), c = /^https/i.test(window.location.protocol); if (q) { try { i.execCommand("BackgroundImageCache", false, true) } catch (w) { } } Ext.apply(Ext, { SSL_SECURE_URL: c && r ? 'javascript:""' : "about:blank", isStrict: l, isSecure: c, isReady: false, enableGarbageCollector: true, enableListenerCollection: false, enableNestedListenerRemoval: false, USE_NATIVE_JSON: false, applyIf: function (C, D) { if (C) { for (var e in D) { if (!Ext.isDefined(C[e])) { C[e] = D[e] } } } return C }, id: function (e, C) { return (e = Ext.getDom(e) || {}).id = e.id || (C || "ext-gen") + (++g) }, extend: function () { var C = function (E) { for (var D in E) { this[D] = E[D] } }; var e = Object.prototype.constructor; return function (J, G, I) { if (Ext.isObject(G)) { I = G; G = J; J = I.constructor != e ? I.constructor : function () { G.apply(this, arguments) } } var E = function () { }, H, D = G.prototype; E.prototype = D; H = J.prototype = new E(); H.constructor = J; J.superclass = D; if (D.constructor == e) { D.constructor = G } J.override = function (F) { Ext.override(J, F) }; H.superclass = H.supr = (function () { return D }); H.override = C; Ext.override(J, I); J.extend = function (F) { return Ext.extend(J, F) }; return J } } (), override: function (e, D) { if (D) { var C = e.prototype; Ext.apply(C, D); if (Ext.isIE && D.hasOwnProperty("toString")) { C.toString = D.toString } } }, namespace: function () { var C, e; Ext.each(arguments, function (D) { e = D.split("."); C = window[e[0]] = window[e[0]] || {}; Ext.each(e.slice(1), function (E) { C = C[E] = C[E] || {} }) }); return C }, urlEncode: function (G, F) { var D, C = [], E = encodeURIComponent; Ext.iterate(G, function (e, H) { D = Ext.isEmpty(H); Ext.each(D ? e : H, function (I) { C.push("&", E(e), "=", (!Ext.isEmpty(I) && (I != e || !D)) ? (Ext.isDate(I) ? Ext.encode(I).replace(/"/g, "") : E(I)) : "") }) }); if (!F) { C.shift(); F = "" } return F + C.join("") }, urlDecode: function (D, C) { if (Ext.isEmpty(D)) { return {} } var G = {}, F = D.split("&"), H = decodeURIComponent, e, E; Ext.each(F, function (I) { I = I.split("="); e = H(I[0]); E = H(I[1]); G[e] = C || !G[e] ? E : [].concat(G[e]).concat(E) }); return G }, urlAppend: function (e, C) { if (!Ext.isEmpty(C)) { return e + (e.indexOf("?") === -1 ? "?" : "&") + C } return e }, toArray: function () { return r ? function (D, G, E, F) { F = []; for (var C = 0, e = D.length; C < e; C++) { F.push(D[C]) } return F.slice(G || 0, E || F.length) } : function (e, D, C) { return Array.prototype.slice.call(e, D || 0, C || e.length) } } (), isIterable: function (e) { if (Ext.isArray(e) || e.callee) { return true } if (/NodeList|HTMLCollection/.test(s.call(e))) { return true } return ((typeof e.nextNode != "undefined" || e.item) && Ext.isNumber(e.length)) }, each: function (F, E, D) { if (Ext.isEmpty(F, true)) { return } if (!Ext.isIterable(F) || Ext.isPrimitive(F)) { F = [F] } for (var C = 0, e = F.length; C < e; C++) { if (E.call(D || F[C], F[C], C, F) === false) { return C } } }, iterate: function (D, C, e) { if (Ext.isEmpty(D)) { return } if (Ext.isIterable(D)) { Ext.each(D, C, e); return } else { if (Ext.isObject(D)) { for (var E in D) { if (D.hasOwnProperty(E)) { if (C.call(e || D, E, D[E], D) === false) { return } } } } } }, getDom: function (e) { if (!e || !i) { return null } return e.dom ? e.dom : (Ext.isString(e) ? i.getElementById(e) : e) }, getBody: function () { return Ext.get(i.body || i.documentElement) }, removeNode: r && !o ? function () { var e; return function (C) { if (C && C.tagName != "BODY") { (Ext.enableNestedListenerRemoval) ? Ext.EventManager.purgeElement(C, true) : Ext.EventManager.removeAll(C); e = e || i.createElement("div"); e.appendChild(C); e.innerHTML = ""; delete Ext.elCache[C.id] } } } () : function (e) { if (e && e.parentNode && e.tagName != "BODY") { (Ext.enableNestedListenerRemoval) ? Ext.EventManager.purgeElement(e, true) : Ext.EventManager.removeAll(e); e.parentNode.removeChild(e); delete Ext.elCache[e.id] } }, isEmpty: function (C, e) { return C === null || C === undefined || ((Ext.isArray(C) && !C.length)) || (!e ? C === "" : false) }, isArray: function (e) { return s.apply(e) === "[object Array]" }, isDate: function (e) { return s.apply(e) === "[object Date]" }, isObject: function (e) { return !!e && Object.prototype.toString.call(e) === "[object Object]" }, isPrimitive: function (e) { return Ext.isString(e) || Ext.isNumber(e) || Ext.isBoolean(e) }, isFunction: function (e) { return s.apply(e) === "[object Function]" }, isNumber: function (e) { return typeof e === "number" && isFinite(e) }, isString: function (e) { return typeof e === "string" }, isBoolean: function (e) { return typeof e === "boolean" }, isElement: function (e) { return !!e && e.tagName }, isDefined: function (e) { return typeof e !== "undefined" }, isOpera: A, isWebKit: u, isChrome: h, isSafari: x, isSafari3: b, isSafari4: B, isSafari2: f, isIE: r, isIE6: q, isIE7: p, isIE8: o, isGecko: n, isGecko2: d, isGecko3: a, isBorderBox: v, isLinux: m, isWindows: z, isMac: k, isAir: j }); Ext.ns = Ext.namespace })(); Ext.ns("Ext.util", "Ext.lib", "Ext.data"); Ext.elCache = {}; Ext.apply(Function.prototype, { createInterceptor: function (b, a) { var c = this; return !Ext.isFunction(b) ? this : function () { var e = this, d = arguments; b.target = e; b.method = c; return (b.apply(a || e || window, d) !== false) ? c.apply(e || window, d) : null } }, createCallback: function () { var a = arguments, b = this; return function () { return b.apply(window, a) } }, createDelegate: function (c, b, a) { var d = this; return function () { var f = b || arguments; if (a === true) { f = Array.prototype.slice.call(arguments, 0); f = f.concat(b) } else { if (Ext.isNumber(a)) { f = Array.prototype.slice.call(arguments, 0); var e = [a, 0].concat(b); Array.prototype.splice.apply(f, e) } } return d.apply(c || window, f) } }, defer: function (c, e, b, a) { var d = this.createDelegate(e, b, a); if (c > 0) { return setTimeout(d, c) } d(); return 0 } }); Ext.apply(String, { format: function (b) { var a = Ext.toArray(arguments, 1); return b.replace(/\{(\d+)\}/g, function (c, d) { return a[d] }) } }); Ext.applyIf(Array.prototype, { indexOf: function (b, c) { var a = this.length; c = c || 0; c += (c < 0) ? a : 0; for (; c < a; ++c) { if (this[c] === b) { return c } } return -1 }, remove: function (b) { var a = this.indexOf(b); if (a != -1) { this.splice(a, 1) } return this } });
    /*
    * Ext Core Library 3.0
    * http://extjs.com/
    * Copyright(c) 2006-2009, Ext JS, LLC.
    * 
    * MIT Licensed - http://extjs.com/license/mit.txt
    */
    Ext.DomHelper = function () { var r = null, i = /^(?:br|frame|hr|img|input|link|meta|range|spacer|wbr|area|param|col)$/i, k = /^table|tbody|tr|td$/i, o, l = "afterbegin", m = "afterend", c = "beforebegin", n = "beforeend", a = "<table>", g = "</table>", b = a + "<tbody>", h = "</tbody>" + g, j = b + "<tr>", q = "</tr>" + h; function f(v, x, w, y, u, s) { var t = o.insertHtml(y, Ext.getDom(v), p(x)); return w ? Ext.get(t, true) : t } function p(y) { var u = "", t, x, w, s, z; if (Ext.isString(y)) { u = y } else { if (Ext.isArray(y)) { for (var v = 0; v < y.length; v++) { if (y[v]) { u += p(y[v]) } } } else { u += "<" + (y.tag = y.tag || "div"); Ext.iterate(y, function (A, B) { if (!/tag|children|cn|html$/i.test(A)) { if (Ext.isObject(B)) { u += " " + A + '="'; Ext.iterate(B, function (D, C) { u += D + ":" + C + ";" }); u += '"' } else { u += " " + ({ cls: "class", htmlFor: "for"}[A] || A) + '="' + B + '"' } } }); if (i.test(y.tag)) { u += "/>" } else { u += ">"; if ((z = y.children || y.cn)) { u += p(z) } else { if (y.html) { u += y.html } } u += "</" + y.tag + ">" } } } return u } function e(A, x, w, y) { r.innerHTML = [x, w, y].join(""); var t = -1, v = r, u; while (++t < A) { v = v.firstChild } if (u = v.nextSibling) { var z = document.createDocumentFragment(); while (v) { u = v.nextSibling; z.appendChild(v); v = u } v = z } return v } function d(s, t, v, u) { var w, x; r = r || document.createElement("div"); if (s == "td" && (t == l || t == n) || !/td|tr|tbody/i.test(s) && (t == c || t == m)) { return } x = t == c ? v : t == m ? v.nextSibling : t == l ? v.firstChild : null; if (t == c || t == m) { v = v.parentNode } if (s == "td" || (s == "tr" && (t == n || t == l))) { w = e(4, j, u, q) } else { if ((s == "tbody" && (t == n || t == l)) || (s == "tr" && (t == c || t == m))) { w = e(3, b, u, h) } else { w = e(2, a, u, g) } } v.insertBefore(w, x); return w } o = { markup: function (s) { return p(s) }, applyStyles: function (v, w) { if (w) { var t = 0, s, u; v = Ext.fly(v); if (Ext.isFunction(w)) { w = w.call() } if (Ext.isString(w)) { w = w.trim().split(/\s*(?::|;)\s*/); for (s = w.length; t < s; ) { v.setStyle(w[t++], w[t++]) } } else { if (Ext.isObject(w)) { v.setStyle(w) } } } }, insertHtml: function (x, s, y) { var w = {}, u, A, z, B, v, t; x = x.toLowerCase(); w[c] = ["BeforeBegin", "previousSibling"]; w[m] = ["AfterEnd", "nextSibling"]; if (s.insertAdjacentHTML) { if (k.test(s.tagName) && (t = d(s.tagName.toLowerCase(), x, s, y))) { return t } w[l] = ["AfterBegin", "firstChild"]; w[n] = ["BeforeEnd", "lastChild"]; if ((u = w[x])) { s.insertAdjacentHTML(u[0], y); return s[u[1]] } } else { z = s.ownerDocument.createRange(); A = "setStart" + (/end/i.test(x) ? "After" : "Before"); if (w[x]) { z[A](s); B = z.createContextualFragment(y); s.parentNode.insertBefore(B, x == c ? s : s.nextSibling); return s[(x == c ? "previous" : "next") + "Sibling"] } else { v = (x == l ? "first" : "last") + "Child"; if (s.firstChild) { z[A](s[v]); B = z.createContextualFragment(y); if (x == l) { s.insertBefore(B, s.firstChild) } else { s.appendChild(B) } } else { s.innerHTML = y } return s[v] } } throw 'Illegal insertion point -> "' + x + '"' }, insertBefore: function (s, u, t) { return f(s, u, t, c) }, insertAfter: function (s, u, t) { return f(s, u, t, m, "nextSibling") }, insertFirst: function (s, u, t) { return f(s, u, t, l, "firstChild") }, append: function (s, u, t) { return f(s, u, t, n, "", true) }, overwrite: function (s, u, t) { s = Ext.getDom(s); s.innerHTML = p(u); return t ? Ext.get(s.firstChild) : s.firstChild }, createHtml: p }; return o } ();
    /*
    * Ext Core Library 3.0
    * http://extjs.com/
    * Copyright(c) 2006-2009, Ext JS, LLC.
    * 
    * MIT Licensed - http://extjs.com/license/mit.txt
    */
    Ext.util.JSON = new (function () { var useHasOwn = !!{}.hasOwnProperty, isNative = function () { var useNative = null; return function () { if (useNative === null) { useNative = Ext.USE_NATIVE_JSON && window.JSON && JSON.toString() == "[object JSON]" } return useNative } } (), pad = function (n) { return n < 10 ? "0" + n : n }, doDecode = function (json) { return eval("(" + json + ")") }, doEncode = function (o) { if (!Ext.isDefined(o) || o === null) { return "null" } else { if (Ext.isArray(o)) { return encodeArray(o) } else { if (Ext.isDate(o)) { return Ext.util.JSON.encodeDate(o) } else { if (Ext.isString(o)) { return encodeString(o) } else { if (typeof o == "number") { return isFinite(o) ? String(o) : "null" } else { if (Ext.isBoolean(o)) { return String(o) } else { var a = ["{"], b, i, v; for (i in o) { if (!o.getElementsByTagName) { if (!useHasOwn || o.hasOwnProperty(i)) { v = o[i]; switch (typeof v) { case "undefined": case "function": case "unknown": break; default: if (b) { a.push(",") } a.push(doEncode(i), ":", v === null ? "null" : doEncode(v)); b = true } } } } a.push("}"); return a.join("") } } } } } } }, m = { "\b": "\\b", "\t": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", '"': '\\"', "\\": "\\\\" }, encodeString = function (s) { if (/["\\\x00-\x1f]/.test(s)) { return '"' + s.replace(/([\x00-\x1f\\"])/g, function (a, b) { var c = m[b]; if (c) { return c } c = b.charCodeAt(); return "\\u00" + Math.floor(c / 16).toString(16) + (c % 16).toString(16) }) + '"' } return '"' + s + '"' }, encodeArray = function (o) { var a = ["["], b, i, l = o.length, v; for (i = 0; i < l; i += 1) { v = o[i]; switch (typeof v) { case "undefined": case "function": case "unknown": break; default: if (b) { a.push(",") } a.push(v === null ? "null" : Ext.util.JSON.encode(v)); b = true } } a.push("]"); return a.join("") }; this.encodeDate = function (o) { return '"' + o.getFullYear() + "-" + pad(o.getMonth() + 1) + "-" + pad(o.getDate()) + "T" + pad(o.getHours()) + ":" + pad(o.getMinutes()) + ":" + pad(o.getSeconds()) + '"' }; this.encode = function () { var ec; return function (o) { if (!ec) { ec = isNative() ? JSON.stringify : doEncode } return ec(o) } } (); this.decode = function () { var dc; return function (json) { if (!dc) { dc = isNative() ? JSON.parse : doDecode } return dc(json) } } () })(); Ext.encode = Ext.util.JSON.encode; Ext.decode = Ext.util.JSON.decode;
    /*
    * Ext Core Library 3.0
    * http://extjs.com/
    * Copyright(c) 2006-2009, Ext JS, LLC.
    * 
    * MIT Licensed - http://extjs.com/license/mit.txt
    */
    (function () { var h = Ext.util, k = Ext.toArray, j = Ext.each, a = Ext.isObject, g = true, i = false; h.Observable = function () { var l = this, m = l.events; if (l.listeners) { l.on(l.listeners); delete l.listeners } l.events = m || {} }; h.Observable.prototype = { filterOptRe: /^(?:scope|delay|buffer|single)$/, fireEvent: function () { var l = k(arguments), n = l[0].toLowerCase(), o = this, m = g, r = o.events[n], p, s; if (o.eventsSuspended === g) { if (p = o.eventQueue) { p.push(l) } } else { if (a(r) && r.bubble) { if (r.fire.apply(r, l.slice(1)) === i) { return i } s = o.getBubbleTarget && o.getBubbleTarget(); if (s && s.enableBubble) { if (!s.events[n] || !Ext.isObject(s.events[n]) || !s.events[n].bubble) { s.enableBubble(n) } return s.fireEvent.apply(s, l) } } else { if (a(r)) { l.shift(); m = r.fire.apply(r, l) } } } return m }, addListener: function (n, r, t, m) { var q = this, p, u, s, l; if (a(n)) { m = n; for (p in m) { u = m[p]; if (!q.filterOptRe.test(p)) { q.addListener(p, u.fn || u, u.scope || m.scope, u.fn ? u : m) } } } else { n = n.toLowerCase(); l = q.events[n] || g; if (Ext.isBoolean(l)) { q.events[n] = l = new h.Event(q, n) } l.addListener(r, t, a(m) ? m : {}) } }, removeListener: function (l, n, m) { var o = this.events[l.toLowerCase()]; if (a(o)) { o.removeListener(n, m) } }, purgeListeners: function () { var n = this.events, l, m; for (m in n) { l = n[m]; if (a(l)) { l.clearListeners() } } }, addEvents: function (p) { var n = this; n.events = n.events || {}; if (Ext.isString(p)) { var l = arguments, m = l.length; while (m--) { n.events[l[m]] = n.events[l[m]] || g } } else { Ext.applyIf(n.events, p) } }, hasListener: function (l) { var m = this.events[l]; return a(m) && m.listeners.length > 0 }, suspendEvents: function (l) { this.eventsSuspended = g; if (l && !this.eventQueue) { this.eventQueue = [] } }, resumeEvents: function () { var l = this, m = l.eventQueue || []; l.eventsSuspended = i; delete l.eventQueue; j(m, function (n) { l.fireEvent.apply(l, n) }) } }; var e = h.Observable.prototype; e.on = e.addListener; e.un = e.removeListener; h.Observable.releaseCapture = function (l) { l.fireEvent = e.fireEvent }; function f(m, n, l) { return function () { if (n.target == arguments[0]) { m.apply(l, k(arguments)) } } } function c(p, q, m, n) { m.task = new h.DelayedTask(); return function () { m.task.delay(q.buffer, p, n, k(arguments)) } } function d(n, o, m, l) { return function () { o.removeListener(m, l); return n.apply(l, arguments) } } function b(p, q, m, n) { return function () { var l = new h.DelayedTask(); if (!m.tasks) { m.tasks = [] } m.tasks.push(l); l.delay(q.delay || 10, p, n, k(arguments)) } } h.Event = function (m, l) { this.name = l; this.obj = m; this.listeners = [] }; h.Event.prototype = { addListener: function (p, o, n) { var q = this, m; o = o || q.obj; if (!q.isListening(p, o)) { m = q.createListener(p, o, n); if (q.firing) { q.listeners = q.listeners.slice(0) } q.listeners.push(m) } }, createListener: function (q, p, r) { r = r || {}, p = p || this.obj; var m = { fn: q, scope: p, options: r }, n = q; if (r.target) { n = f(n, r, p) } if (r.delay) { n = b(n, r, m, p) } if (r.single) { n = d(n, this, q, p) } if (r.buffer) { n = c(n, r, m, p) } m.fireFn = n; return m }, findListener: function (q, p) { var r = this.listeners, n = r.length, m, o; while (n--) { m = r[n]; if (m) { o = m.scope; if (m.fn == q && (o == p || o == this.obj)) { return n } } } return -1 }, isListening: function (m, l) { return this.findListener(m, l) != -1 }, removeListener: function (r, q) { var p, m, n, s = this, o = i; if ((p = s.findListener(r, q)) != -1) { if (s.firing) { s.listeners = s.listeners.slice(0) } m = s.listeners[p]; if (m.task) { m.task.cancel(); delete m.task } n = m.tasks && m.tasks.length; if (n) { while (n--) { m.tasks[n].cancel() } delete m.tasks } s.listeners.splice(p, 1); o = g } return o }, clearListeners: function () { var o = this, m = o.listeners, n = m.length; while (n--) { o.removeListener(m[n].fn, m[n].scope) } }, fire: function () { var r = this, o = k(arguments), q = r.listeners, m = q.length, p = 0, n; if (m > 0) { r.firing = g; for (; p < m; p++) { n = q[p]; if (n && n.fireFn.apply(n.scope || r.obj || window, o) === i) { return (r.firing = i) } } } r.firing = i; return g } } })();
    Ext.util.DelayedTask = function (d, c, a) { var e = this, f, b = function () { clearInterval(f); f = null; d.apply(c, a || []) }; e.delay = function (h, j, i, g) { e.cancel(); d = j || d; c = i || c; a = g || a; f = setInterval(b, h) }; e.cancel = function () { if (f) { clearInterval(f); f = null } } };

    /*!
    * Ext JS Library 3.3.1
    * Copyright(c) 2006-2010 Sencha Inc.
    * licensing@sencha.com
    * http://www.sencha.com/license
    */
    Ext.util.Format = function () { var trimRe = /^\s+|\s+$/g, stripTagsRE = /<\/?[^>]+>/gi, stripScriptsRe = /(?:<script.*?>)((\n|\r|.)*?)(?:<\/script>)/ig, nl2brRe = /\r?\n/g; return { ellipsis: function (value, len, word) { if (value && value.length > len) { if (word) { var vs = value.substr(0, len - 2), index = Math.max(vs.lastIndexOf(" "), vs.lastIndexOf("."), vs.lastIndexOf("!"), vs.lastIndexOf("?")); if (index == -1 || index < (len - 15)) { return value.substr(0, len - 3) + "..." } else { return vs.substr(0, index) + "..." } } else { return value.substr(0, len - 3) + "..." } } return value }, undef: function (value) { return value !== undefined ? value : "" }, defaultValue: function (value, defaultValue) { return value !== undefined && value !== "" ? value : defaultValue }, htmlEncode: function (value) { return !value ? value : String(value).replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;") }, htmlDecode: function (value) { return !value ? value : String(value).replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&quot;/g, '"').replace(/&amp;/g, "&") }, trim: function (value) { return String(value).replace(trimRe, "") }, substr: function (value, start, length) { return String(value).substr(start, length) }, lowercase: function (value) { return String(value).toLowerCase() }, uppercase: function (value) { return String(value).toUpperCase() }, capitalize: function (value) { return !value ? value : value.charAt(0).toUpperCase() + value.substr(1).toLowerCase() }, call: function (value, fn) { if (arguments.length > 2) { var args = Array.prototype.slice.call(arguments, 2); args.unshift(value); return eval(fn).apply(window, args) } else { return eval(fn).call(window, value) } }, usMoney: function (v) { v = (Math.round((v - 0) * 100)) / 100; v = (v == Math.floor(v)) ? v + ".00" : ((v * 10 == Math.floor(v * 10)) ? v + "0" : v); v = String(v); var ps = v.split("."), whole = ps[0], sub = ps[1] ? "." + ps[1] : ".00", r = /(\d+)(\d{3})/; while (r.test(whole)) { whole = whole.replace(r, "$1,$2") } v = whole + sub; if (v.charAt(0) == "-") { return "-$" + v.substr(1) } return "$" + v }, date: function (v, format) { if (!v) { return "" } if (!Ext.isDate(v)) { v = new Date(Date.parse(v)) } return v.dateFormat(format || "m/d/Y") }, dateRenderer: function (format) { return function (v) { return Ext.util.Format.date(v, format) } }, stripTags: function (v) { return !v ? v : String(v).replace(stripTagsRE, "") }, stripScripts: function (v) { return !v ? v : String(v).replace(stripScriptsRe, "") }, fileSize: function (size) { if (size < 1024) { return size + " bytes" } else { if (size < 1048576) { return (Math.round(((size * 10) / 1024)) / 10) + " KB" } else { return (Math.round(((size * 10) / 1048576)) / 10) + " MB" } } }, math: function () { var fns = {}; return function (v, a) { if (!fns[a]) { fns[a] = new Function("v", "return v " + a + ";") } return fns[a](v) } } (), round: function (value, precision) { var result = Number(value); if (typeof precision == "number") { precision = Math.pow(10, precision); result = Math.round(value * precision) / precision } return result }, number: function (v, format) { if (!format) { return v } v = Ext.num(v, NaN); if (isNaN(v)) { return "" } var comma = ",", dec = ".", i18n = false, neg = v < 0; v = Math.abs(v); if (format.substr(format.length - 2) == "/i") { format = format.substr(0, format.length - 2); i18n = true; comma = "."; dec = "," } var hasComma = format.indexOf(comma) != -1, psplit = (i18n ? format.replace(/[^\d\,]/g, "") : format.replace(/[^\d\.]/g, "")).split(dec); if (1 < psplit.length) { v = v.toFixed(psplit[1].length) } else { if (2 < psplit.length) { throw ("NumberFormatException: invalid format, formats should have no more than 1 period: " + format) } else { v = v.toFixed(0) } } var fnum = v.toString(); psplit = fnum.split("."); if (hasComma) { var cnum = psplit[0], parr = [], j = cnum.length, m = Math.floor(j / 3), n = cnum.length % 3 || 3, i; for (i = 0; i < j; i += n) { if (i != 0) { n = 3 } parr[parr.length] = cnum.substr(i, n); m -= 1 } fnum = parr.join(comma); if (psplit[1]) { fnum += dec + psplit[1] } } else { if (psplit[1]) { fnum = psplit[0] + dec + psplit[1] } } return (neg ? "-" : "") + format.replace(/[\d,?\.?]+/, fnum) }, numberRenderer: function (format) { return function (v) { return Ext.util.Format.number(v, format) } }, plural: function (v, s, p) { return v + " " + (v == 1 ? s : (p ? p : s + "s")) }, nl2br: function (v) { return Ext.isEmpty(v) ? "" : v.replace(nl2brRe, "<br/>") } } } ();

    /*
    * Ext Core Library 3.0
    * http://extjs.com/
    * Copyright(c) 2006-2009, Ext JS, LLC.
    * 
    * MIT Licensed - http://extjs.com/license/mit.txt
    */
    Ext.Template = function (d) { var e = this, b = arguments, c = []; if (Ext.isArray(d)) { d = d.join("") } else { if (b.length > 1) { Ext.each(b, function (a) { if (Ext.isObject(a)) { Ext.apply(e, a) } else { c.push(a) } }); d = c.join("") } } e.html = d; if (e.compiled) { e.compile() } }; Ext.Template.prototype = { re: /\{([\w-]+)\}/g, applyTemplate: function (a) { var b = this; return b.compiled ? b.compiled(a) : b.html.replace(b.re, function (c, d) { return a[d] !== undefined ? a[d] : "" }) }, set: function (a, c) { var b = this; b.html = a; b.compiled = null; return c ? b.compile() : b }, compile: function () { var me = this, sep = Ext.isGecko ? "+" : ","; function fn(m, name) { name = "values['" + name + "']"; return "'" + sep + "(" + name + " == undefined ? '' : " + name + ")" + sep + "'" } eval("this.compiled = function(values){ return " + (Ext.isGecko ? "'" : "['") + me.html.replace(/\\/g, "\\\\").replace(/(\r\n|\n)/g, "\\n").replace(/'/g, "\\'").replace(this.re, fn) + (Ext.isGecko ? "';};" : "'].join('');};")); return me }, insertFirst: function (b, a, c) { return this.doInsert("afterBegin", b, a, c) }, insertBefore: function (b, a, c) { return this.doInsert("beforeBegin", b, a, c) }, insertAfter: function (b, a, c) { return this.doInsert("afterEnd", b, a, c) }, append: function (b, a, c) { return this.doInsert("beforeEnd", b, a, c) }, doInsert: function (c, e, b, a) { e = Ext.getDom(e); var d = Ext.DomHelper.insertHtml(c, e, this.applyTemplate(b)); return a ? Ext.get(d, true) : d }, overwrite: function (b, a, c) { b = Ext.getDom(b); b.innerHTML = this.applyTemplate(a); return c ? Ext.get(b.firstChild, true) : b.firstChild } }; Ext.Template.prototype.apply = Ext.Template.prototype.applyTemplate; Ext.Template.from = function (b, a) { b = Ext.getDom(b); return new Ext.Template(b.value || b.innerHTML, a || "") };
    /*
    * Ext JS Library 3.2.0
    * Copyright(c) 2006-2010 Ext JS, Inc.
    * licensing@extjs.com
    * http://www.extjs.com/license
    */
    Ext.XTemplate = function () { Ext.XTemplate.superclass.constructor.apply(this, arguments); var v = this, h = v.html, o = /<tpl\b[^>]*>((?:(?=([^<]+))\2|<(?!tpl\b[^>]*>))*?)<\/tpl>/, d = /^<tpl\b[^>]*?for="(.*?)"/, r = /^<tpl\b[^>]*?if="(.*?)"/, u = /^<tpl\b[^>]*?exec="(.*?)"/, p, n = 0, i = [], l = "values", t = "parent", j = "xindex", k = "xcount", e = "return ", c = "with(values){ "; h = ["<tpl>", h, "</tpl>"].join(""); while ((p = h.match(o))) { var b = p[0].match(d), a = p[0].match(r), x = p[0].match(u), f = null, g = null, q = null, w = b && b[1] ? b[1] : ""; if (a) { f = a && a[1] ? a[1] : null; if (f) { g = new Function(l, t, j, k, c + e + (Ext.util.Format.htmlDecode(f)) + "; }") } } if (x) { f = x && x[1] ? x[1] : null; if (f) { q = new Function(l, t, j, k, c + (Ext.util.Format.htmlDecode(f)) + "; }") } } if (w) { switch (w) { case ".": w = new Function(l, t, c + e + l + "; }"); break; case "..": w = new Function(l, t, c + e + t + "; }"); break; default: w = new Function(l, t, c + e + w + "; }") } } i.push({ id: n, target: w, exec: q, test: g, body: p[1] || "" }); h = h.replace(p[0], "{xtpl" + n + "}"); ++n } Ext.each(i, function (m) { v.compileTpl(m) }); v.master = i[i.length - 1]; v.tpls = i }; Ext.extend(Ext.XTemplate, Ext.Template, { re: /\{([\w-\.\#]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?(\s?[\+\-\*\\]\s?[\d\.\+\-\*\\\(\)]+)?\}/g, codeRe: /\{\[((?:\\\]|.|\n)*?)\]\}/g, applySubTemplate: function (a, h, g, d, c) { var f = this, e, j = f.tpls[a], i, b = []; if ((j.test && !j.test.call(f, h, g, d, c)) || (j.exec && j.exec.call(f, h, g, d, c))) { return "" } i = j.target ? j.target.call(f, h, g) : h; e = i.length; g = j.target ? h : g; if (j.target && Ext.isArray(i)) { Ext.each(i, function (k, l) { b[b.length] = j.compiled.call(f, k, g, l + 1, e) }); return b.join("") } return j.compiled.call(f, i, g, d, c) }, compileTpl: function (tpl) { var fm = Ext.util.Format, useF = this.disableFormats !== true, sep = Ext.isGecko ? "+" : ",", body; function fn(m, name, format, args, math) { if (name.substr(0, 4) == "xtpl") { return "'" + sep + "this.applySubTemplate(" + name.substr(4) + ", values, parent, xindex, xcount)" + sep + "'" } var v; if (name === ".") { v = "values" } else { if (name === "#") { v = "xindex" } else { if (name.indexOf(".") != -1) { v = name } else { v = "values['" + name + "']" } } } if (math) { v = "(" + v + math + ")" } if (format && useF) { args = args ? "," + args : ""; if (format.substr(0, 5) != "this.") { format = "fm." + format + "(" } else { format = 'this.call("' + format.substr(5) + '", '; args = ", values" } } else { args = ""; format = "(" + v + " === undefined ? '' : " } return "'" + sep + format + v + args + ")" + sep + "'" } function codeFn(m, code) { return "'" + sep + "(" + code.replace(/\\'/g, "'") + ")" + sep + "'" } if (Ext.isGecko) { body = "tpl.compiled = function(values, parent, xindex, xcount){ return '" + tpl.body.replace(/(\r\n|\n)/g, "\\n").replace(/'/g, "\\'").replace(this.re, fn).replace(this.codeRe, codeFn) + "';};" } else { body = ["tpl.compiled = function(values, parent, xindex, xcount){ return ['"]; body.push(tpl.body.replace(/(\r\n|\n)/g, "\\n").replace(/'/g, "\\'").replace(this.re, fn).replace(this.codeRe, codeFn)); body.push("'].join('');};"); body = body.join("") } eval(body); return this }, applyTemplate: function (a) { return this.master.compiled.call(this, a, {}, 1, 1) }, compile: function () { return this } }); Ext.XTemplate.prototype.apply = Ext.XTemplate.prototype.applyTemplate; Ext.XTemplate.from = function (a) { a = Ext.getDom(a); return new Ext.XTemplate(a.value || a.innerHTML) };
